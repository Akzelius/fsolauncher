name: electron-ci

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            build_command: "buildwin"
            artifact_name: "fsolauncher-win"
          - os: macos-latest
            build_command: "builddarwin"
            artifact_name: "fsolauncher-mac"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci
      working-directory: src

    - name: Run ESLint
      run: npm run lint
      working-directory: src

    - name: Check if application boots
      run: npm run test-start
      working-directory: src
      timeout-minutes: 1

    - name: Build
      run: npm run ${{ matrix.build_command }}
      working-directory: src
      
    - name: Calculate hashes and save to files (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $hash = (Get-FileHash -Path "release/FreeSO Launcher Setup.exe" -Algorithm SHA256).Hash.ToLower()
        echo "Windows hash: $hash"
        Set-Content -Path "release/sha256_win32.txt" -Value $hash

    - name: Calculate hashes and save to files (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        hash=$(shasum -a 256 release/FreeSO\ Launcher.dmg | awk '{print $1}')
        echo "macOS hash: $hash"
        echo $hash > release/sha256_darwin.txt
      
    - name: List contents of the release directory (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        dir "release"

    - name: List contents of the release directory (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        ls -la release

    - name: Upload artifacts (Windows)
      uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-latest'
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          release/FreeSO Launcher Setup.exe
          release/sha256_win32.txt

    - name: Upload artifacts (macOS)
      uses: actions/upload-artifact@v2
      if: matrix.os == 'macos-latest'
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          release/FreeSO Launcher.dmg
          release/sha256_darwin.txt

  create-release:
    needs: build-and-publish
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Get version
      uses: nyaa8/package-version@v1
      with:
        path: 'src/package.json'
        follow-symlinks: 'false'

    - name: Calculate release type counter
      id: release_type_counter
      run: |
        git fetch --prune --unshallow --tags
        echo "Fetched repository"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          release_type="prod"
        else
          release_type="alpha"
        fi
        echo "Determined release type: $release_type"
        echo "RELEASE_TYPE=$release_type" >> $GITHUB_ENV
        tags_with_counter=$(git tag --list | grep -E "^${{ env.PACKAGE_VERSION }}-${release_type}\.[0-9]+$")
        echo "tags_with_counter: $tags_with_counter"
        max_counter=0
        for tag in $tags_with_counter; do
          current_counter=$(echo $tag | sed -E "s/^${{ env.PACKAGE_VERSION }}-${release_type}\.([0-9]+)$/\1/")
          echo "current_counter: $current_counter"
          if [[ $current_counter -gt $max_counter ]]; then
            max_counter=$current_counter
          fi
        done
        echo "Found max counter: $max_counter"
        counter=$((max_counter + 1))
        echo "Calculated counter: $counter"
        echo "COUNTER=$counter" >> $GITHUB_ENV
        full_version_name="${{ env.PACKAGE_VERSION }}-$release_type.$counter"
        echo "FULL_VERSION_NAME=$full_version_name" >> $GITHUB_ENV

    - name: Generate release notes
      id: release_notes
      run: |
        if [ "${{ env.RELEASE_TYPE }}" == "alpha" ]; then
          release_notes="**This is a pre-release version meant for development and testing.**"
        else
          release_notes="**This is a stable release.**"
        fi

        echo "RELEASE_NOTES=$release_notes" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.FULL_VERSION_NAME }}
        release_name: Release ${{ env.FULL_VERSION_NAME }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/main' }}

    - name: Download artifacts (Windows)
      uses: actions/download-artifact@v2
      with:
        name: fsolauncher-win
        path: release/win
    - name: Download artifacts (macOS)
      uses: actions/download-artifact@v2
      with:
        name: fsolauncher-mac
        path: release/mac

    - name: Upload Release Assets (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/win/FreeSO Launcher Setup.exe
        asset_name: fsolauncher-${{ env.FULL_VERSION_NAME }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Release Assets (Windows Hash)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/win/sha256_win32.txt
        asset_name: sha256-win32-${{ env.FULL_VERSION_NAME }}.txt
        asset_content_type: text/plain
        
    - name: Upload Release Assets (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/mac/FreeSO Launcher.dmg
        asset_name: fsolauncher-${{ env.FULL_VERSION_NAME }}.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload Release Assets (macOS Hash)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/mac/sha256_darwin.txt
        asset_name: sha256-darwin-${{ env.FULL_VERSION_NAME }}.txt
        asset_content_type: text/plain
